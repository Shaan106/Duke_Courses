$date
	Fri Jan 19 11:40:20 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module full_adder_tb $end
$var wire 1 ! Cout $end
$var wire 1 " S $end
$var reg 1 # A $end
$var reg 1 $ B $end
$var reg 1 % Cin $end
$scope module adder $end
$var wire 1 # A $end
$var wire 1 $ B $end
$var wire 1 % Cin $end
$var wire 1 ! Cout $end
$var wire 1 " S $end
$var wire 1 & w1 $end
$upscope $end
$upscope $end
$scope module two_bit_adder_tb $end
$var wire 1 ' Cout $end
$var wire 2 ( S [1:0] $end
$var wire 1 ) Cin $end
$var wire 2 * B [1:0] $end
$var wire 2 + A [1:0] $end
$var integer 32 , i [31:0] $end
$scope module adder $end
$var wire 2 - A [1:0] $end
$var wire 2 . B [1:0] $end
$var wire 1 ) Cin $end
$var wire 1 ' Cout $end
$var wire 1 / w1 $end
$var wire 2 0 S [1:0] $end
$scope module adder1 $end
$var wire 1 1 A $end
$var wire 1 2 B $end
$var wire 1 ) Cin $end
$var wire 1 / Cout $end
$var wire 1 3 S $end
$var wire 1 4 w1 $end
$upscope $end
$scope module adder2 $end
$var wire 1 5 A $end
$var wire 1 6 B $end
$var wire 1 / Cin $end
$var wire 1 ' Cout $end
$var wire 1 7 S $end
$var wire 1 8 w1 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
08
x7
06
05
04
03
02
01
bx0 0
z/
b0 .
b0 -
b0 ,
b0 +
b0 *
0)
bx0 (
z'
0&
0%
0$
0#
0"
z!
$end
#100
1"
1#
#200
bx1 (
bx1 0
13
12
b1 *
b1 .
0#
b1 ,
1$
#300
0"
1&
1#
#400
bx0 (
bx0 0
03
02
16
b10 *
b10 .
0&
1"
0#
b10 ,
0$
1%
#500
0"
1#
#600
bx1 (
bx1 0
13
12
b11 *
b11 .
0#
b11 ,
1$
#700
1"
1&
1#
#800
0&
0"
0#
0$
0%
